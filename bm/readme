c++ -std=c++11 -Wall -fPIC -c tcpstream.cpp tcpacceptor.cpp tcpconnector.cpp
c++ -std=c++11 -shared -Wl,-install_name,libtcpsockets.so.1 -o libtcpsockets.so.1.0 *.o
sudo cp libtcpsockets.so.1.0 /usr/lib

sudo ln -sf /usr/lib/libtcpsockets.so.1.0 /usr/lib/libtcpsockets.so.1
sudo ln -sf /usr/lib/libtcpsockets.so.1.0 /usr/lib/libtcpsockets.so

# -dynamiclib
# otool -L ../tcpsockets/libtcpsockets.so.1.0

c++ -std=c++11 -I/Users/bm/nos-c/ -ltcpsockets NOSDaemon.cpp NOSCommon.cpp -o server
c++ -std=c++11 -I/Users/bm/nos-c/ -ltcpsockets NOSClient.cpp NOSCommon.cpp -o client

c++ -std=c++11  -I/Users/bm/nos-c/ -ltcpsockets SerializableClosureExample.cpp NOSClient.cpp NOSCommon.cpp



// Client sends a set request to Foo::var1
RPCResponse Foo::set_var1(int32_t &val) {
    auto set_var1_delegate = [](int32_t &closure_val) -> Function<RPCResponse(FooServerProxy*)> {
        auto x = [=](FooServerProxy *obj){ return obj->set_var1(closure_val); };
        return x;
    }(val);

    auto thunk = serialize( {
        ObjectID: this.objectID,
        Action: set_var1_delegate.Save(),
    } );

    return NOSClient::send(thunk);
}


// Server receives a method call request for a Foo object
static RPCResponse FooServerProxy::handleIncomingRequest(auto thunk) {
    objectID, method_delegate_compressed = deserialize(thunk);
    // never use operator[] because it creates a new key if not exists!!!
    if (_FooServerProxyObjectsTable.find(objectID) == m.end()) {
        return RPCResponse( /object not found!/ );

    } else {
        FooServerProxy *obj = _FooServerProxyObjectsTable.at( objectID );
        auto method_delegate = Function<RPCResponse(FooServerProxy*)>::Load(method_delegate_compressed);
        method_delegate( obj ); // will call obj->method(/closure vars/);
    }
}


// The Foo server proxy receives the set request
RPCResponse Foo::set_var1(int32_t &val) {
     _var1 = val;
     return RPCResponse(/Action was OK/);
}


// Client sends a get request to Foo::var1
int32_t Foo::get_var1(int32_t &val) {
    auto get_var1_delegate = []() -> Function<int32_t(FooServerProxy*)> {
        auto x = [=](FooServerProxy *obj){ return obj->get_var1(); };
        return x;
    }();

    auto thunk = serialize( {
        ObjectID: this.objectID,
        Action: get_var1_delegate.Save(),
    } );

    auto RPCResponse = NOSClient::send(thunk);
    serverResponseCode, eval_get_delegate_compressed = deserialize(RPCResponse);

    if (serverResponseCode != OK) throw new Exception(serverResponseCode);
    return Function<int32_t()>::Load(eval_get_delegate_compressed)( );   // extract and eval the function
}


// Server receives a method call request for a Foo object
// same code as above


// The Foo server proxy receives the get request
int32_t FooServerProxy::get_var1() {
    return _var1;
}
